#ifndef _COMPRO_LEAFNODE_H
#define _COMPRO_LEAFNODE_H

#include <string.h>

class CLeafNode
{
public:
	CLeafNode();
	virtual ~CLeafNode();

	/***************************************** set_key **********************************************
	功能：设置数据项的关键字
	返回值：成功返回true,失败返回false
	参数：
		char			*pkey		in		关键字字串首指针
		unsigned char	ulen		in		关键字字节长度
	程序员：
	创建日期：
	最后修改日期：
	备注：判别pKey和uLen有意义,失败不改变数据项原有内容
	************************************************************************************************/
	bool set_key(char *pkey, unsigned char ulen);
	bool setId(int id);

	int getId()
	{
		return elemid;
	}
		

	/********************************** get_first_different_byte ************************************
	功能：寻找两个数据项关键字第一个不同的Byte
	返回值：成功返回不同Byte的序号，失败返回-1
	参数：
		CTreeNode			*pitem			in		另一个数据项
		short				sstart_offset	in		起始偏移
	程序员：
	创建日期：
	最后修改日期：
	备注：两个数据项都是空的返回-1，数据项相等返回-1，一个数据项是空返回0
	************************************************************************************************/
	long get_first_different_byte(CLeafNode *pitem, short sstart_offset = 0);

	/**************************************** get_byte **********************************************
	功能：获得数据项中关键字指定字节的数据
	返回值：成功返回字节数据,失败返回0
	参数：
		long		lseq_num		in		指定关键字字节序号
	程序员：
	创建日期：
	最后修改日期：
	备注：指定关键字字节序号超出关键字长返回0
	************************************************************************************************/
	unsigned char get_byte(long lseq_num);

	/******************************************* == *************************************************
	功能：判断数据项中关键字的相等逻辑关系
	返回值：相等返回true,不相等返回false
	参数：
		const CTreeNode		&item		in		右参数
	程序员：
	创建日期：
	最后修改日期：
	备注：任何一个数据项为空返回false
	************************************************************************************************/
	bool operator ==(const CLeafNode &item) const;

	bool operator >=(const CLeafNode &item) const;

	/******************************************* key ************************************************
	功能：获得关键字字符串
	返回值：返回关键字首指针
	参数：
		long		&llen		out			输出关键字长度
	程序员：
	创建日期：
	最后修改日期：
	备注：
	************************************************************************************************/
	char *key(long &llen);

	/******************************************** < *************************************************
	功能：判断数据项中关键字的小于逻辑关系
	返回值：小于item返回true,大于等于Item返回false
	参数：
		const CTreeNode		&item		in		右参数
	程序员：
	创建日期：
	最后修改日期：
	备注：
	************************************************************************************************/
	bool operator <(const CLeafNode &item) const;

	/***************************************** is_null **********************************************
	功能：判断数据项是否为空，以关键字是否为空为准
	返回值：为空返回true,不空返回false
	参数：
	程序员：
	创建日期：
	最后修改日期：
	备注：
	************************************************************************************************/
	bool is_null();

	/*************************************** is_single_byte *****************************************
	功能：判断数据项是否为单字节串
	返回值：单字节串返回true,否则返回false
	参数：
	程序员：
	创建日期：
	最后修改日期：
	备注：
	************************************************************************************************/
	bool is_single_byte();

	/**************************************** get_head_offset ***************************************
	功能：获得串首1或2字节的编码值
	返回值：成功返回编码值,空数据项返回0
	参数：
	程序员：
	创建日期：
	最后修改日期：
	备注：
	************************************************************************************************/
	unsigned short get_head_offset();

protected:

public:
	//
	unsigned char ukey_len_;
	unsigned short usWeight;    //权重
	int elemid;
	//unsigned int uiUpPos; //汉字词典的下标
	char *pkey_;
};

#endif 
